generator client {
  provider      = "prisma-client-js"
  output        = "../models"
  binaryTargets = ["native", "windows", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model clients {
  id            String          @id(map: "client_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String
  password      String?
  profile       Json?           @default("{}")
  deleted_at    DateTime?       @db.Timestamptz(6)
  ai_task       ai_task[]
  organizations organizations[]
}

model organizations {
  id         String    @id(map: "organization_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_client  String    @db.Uuid
  name       String
  data       Json
  questions  Json
  deleted_at DateTime? @db.Timestamptz(6)
  onboard    Json      @default("\"{ qa: false, profile: false }\"")
  client     clients   @relation(fields: [id_client], references: [id], onDelete: Cascade)
}

model ai_task {
  id                 String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_client          String       @db.Uuid
  worker_script_path String
  status             AITaskStatus @default(PENDING)
  created_at         DateTime     @default(now())
  updated_at         DateTime     @updatedAt
  input              Json         @db.Json
  last_error         Json?        @db.Json
  last_progress      Json?        @db.Json
  name               String
  output             Json?        @db.Json
  client             clients      @relation(fields: [id_client], references: [id], onDelete: Cascade)
}

enum AITaskStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  INTERRUPTED
  INVALID_WORKER_PATH
}
