generator client {
  provider      = "prisma-client-js"
  output        = "../models"
  binaryTargets = ["native", "windows", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model clients {
  id            String          @id(map: "client_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String
  password      String?
  profile       Json?           @default("{}")
  deleted_at    DateTime?       @db.Timestamptz(6)
  ai_task       ai_task[]
  auth_tokens   auth_tokens[]
  organizations organizations[]
}

model organizations {
  id             String     @id(map: "organization_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_client      String     @db.Uuid
  name           String
  data           Json
  questions      Json
  deleted_at     DateTime?  @db.Timestamptz(6)
  onboard        Json       @default("{\"qa\": false, \"profile\": false}")
  client         clients    @relation(fields: [id_client], references: [id], onDelete: Cascade)
  other_sessions sessions[] @relation("sessionsTosessions")
}

model ai_task {
  id                 String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_client          String       @db.Uuid
  worker_script_path String
  status             AITaskStatus @default(PENDING)
  created_at         DateTime     @default(now())
  updated_at         DateTime     @updatedAt
  input              Json         @db.Json
  last_error         Json?        @db.Json
  last_progress      Json?        @db.Json
  name               String
  output             Json?        @db.Json
  client             clients      @relation(fields: [id_client], references: [id], onDelete: Cascade)
}

model auth_tokens {
  id         String    @id(map: "sessions_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  client_id  String    @db.Uuid
  token      String    @unique(map: "sessions_token_key")
  expires_at DateTime  @db.Timestamptz(6)
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  user_agent String?
  ip_address String?
  clients    clients   @relation(fields: [client_id], references: [id], onDelete: Cascade, map: "sessions_client_id_fkey")
}

model sessions {
  id               String             @id(map: "sessions_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_org           String             @db.Uuid
  name             String
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  config           Json
  state            Json
  status           String             @default("ongoing")
  session_messages session_messages[]
  sessions         organizations      @relation("sessionsTosessions", fields: [id_org], references: [id], onDelete: Cascade)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model session_messages {
  id         String   @id(map: "session_lines_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_session String   @db.Uuid
  role       String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  content    Json     @default("0")
  phase      Int      @db.SmallInt
  sessions   sessions @relation(fields: [id_session], references: [id], onDelete: Cascade, map: "session_lines_id_session_fkey")
}

enum AITaskStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  INTERRUPTED
  INVALID_WORKER_PATH
}
